package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"

	"html/template"

	"guestbook/constants"

	"github.com/go-chi/chi/v5"
	"gorm.io/gorm"
)

var guestbookTemplate *template.Template = loadGuestbookTemplate()

func formatDate(t time.Time) string {
	return t.Format("Jan 2, 2006")
}

func loadGuestbookTemplate() *template.Template {
	tmpl, err := template.New("guestbook_page.html").Funcs(template.FuncMap{
		"formatDate": formatDate,
	}).ParseFiles("templates/guestbook_page.html")

	if err != nil {
		log.Fatal(err)
	}

	return tmpl
}

func GuestbookPage(w http.ResponseWriter, r *http.Request) {
	guestbookID := chi.URLParam(r, "guestbookID")
	var guestbook Guestbook
	result := db.Preload("Messages", func(db *gorm.DB) *gorm.DB {
		return db.Order("created_at desc")
	}).First(&guestbook, "id = ?", guestbookID)
	if result.Error != nil {
		http.Error(w, "Guestbook not found", http.StatusNotFound)
		return
	}

	if constants.DEBUG_MODE {
		guestbookTemplate = loadGuestbookTemplate()
	}

	err := guestbookTemplate.Execute(w, guestbook)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

func GuestbookSubmit(w http.ResponseWriter, r *http.Request) {
	guestbookID := chi.URLParam(r, "guestbookID")
	var guestbook Guestbook
	result := db.First(&guestbook, "id = ?", guestbookID)
	if result.Error != nil {
		http.Error(w, "Guestbook not found", http.StatusNotFound)
		return
	}

	name := strings.TrimSpace(r.FormValue("name"))
	text := strings.TrimSpace(r.FormValue("text"))
	website := strings.TrimSpace(r.FormValue("website"))
	var websitePtr *string
	if website != "" {
		websitePtr = &website
	}
	message := Message{Name: name, Text: text, Website: websitePtr, GuestbookID: guestbook.ID}
	result = db.Create(&message)
	if result.Error != nil {
		http.Error(w, "Error submitting message", http.StatusInternalServerError)
		return
	}

	// now send an email to the user if necessary
	var adminUser AdminUser
	result = db.First(&adminUser, "id = ?", guestbook.AdminUserID)
	if result.Error != nil {
		http.Error(w, "Guestbook not found", http.StatusNotFound)
		return
	}

	if adminUser.EmailNotifications && adminUser.EmailVerified && adminUser.Email != "" {
		submitterText := ""
		if website != "" {
			submitterText = "[Website: " + website + "]"
		}

		go SendMail([]string{adminUser.Email}, "[Guestbooks] New message on guestbook '"+guestbook.WebsiteURL+"'", fmt.Sprintf(`
Hi! Someone has just submitted a new message on your guestbook '%s'.

From: %s %s
Message:
===BEGIN MESSAGE===
%s
===END MESSAGE===

You can view the messages on your guestbook here https://guestbooks.meadowing.club/admin/guestbook/%s

This is an autogenerated message from https://guestbooks.meadowing.club/ . Please don't answer since this mailbox is not monitored. 
If you do need some help then please reach out through here https://meadow.bearblog.dev/mailbox/ 

`, guestbook.WebsiteURL, message.Name, submitterText, message.Text, guestbookID))
	}

	http.Redirect(w, r, "/guestbook/"+guestbookID, http.StatusSeeOther)
}
